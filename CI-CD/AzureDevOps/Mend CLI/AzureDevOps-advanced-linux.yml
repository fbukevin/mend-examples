# ******** Mend Unified CLI Template for Azure DevOps ********
#
# You may wish to alter this file to override the build tool and Mend scanning technologies.
#
# For more configuration options, please check the technical documentation portal:
# ðŸ“š https://docs.mend.io/bundle/integrations/page/scan_with_the_mend_cli.html
#
# ******** Description ********
# mend dep will automatically use package managers and file system scanning to detect open source components.
# mend code will automatically detect languages and frameworks used in your projects to scan for code weaknesses.

# If you are NOT using a service user, and have multiple organizations, don't forget to scall the scope -s parameter to set the organization
# The following values should be added as environment variables with email and userKey being secrets
#    MEND_URL: the mend url that you login to - (https://saas.mend.io) for example
#    MEND_EMAIL: the user email for the mend platform account you wish to scan with
#    MEND_USER_KEY: the user key found under my profile for the user you wish to scan with

name: 'mend-cli-scan'

# Define your own pipeline trigger here:
# Below is defined a trigger for scanning on a push to the main branch and scanning on a push to release branches.  This is considered an ideal time to scan so that an SBOM can be created for software releases and inventory is managed for released software.
trigger:
- main
- v*


pool:
  vmImage: ubuntu-latest
  
variables:
- name: MEND_URL
  value: https://saas.mend.io 
# value: https://saas-eu.mend.io

jobs:
- job: BuildOnMain
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  steps:
### Build the application with your required package manager.  The below example is for dotnet: ###
    - script: |
        SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
        echo "${SLN} is the solution that will be built"
        dotnet restore ${SLN}
      displayName: 'dotnet build'
### The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "npm install --only=prod"
    - script: |
        echo Downloading Mend CLI
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
    
        ### Run a Mend Software Composition Analysis Scan
        echo Run Mend dependencies scan
        mend dep -u -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) --no-color --fail-policy > dep-results.txt
        export dep_exit=$?
        cat dep-results.txt

        ### Run a Mend Static Application Security Analysis Scan
        echo Start Mend code scan
        mend code -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) -r --formats sarif --filename code-results --no-progress
        export code_exit=$?

        ### Log Clean Up ###
        mv ~/.mend/logs $(System.DefaultWorkingDirectory)
        mv $(System.DefaultWorkingDirectory)/dep-results.txt $(System.DefaultWorkingDirectory)/logs/dep-results.txt
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/logs/dep-results.txt"

        ### Collect Mend variables for API Usage ###
        WS_PROJECTTOKEN=$(grep -oP "(?<=token=)[^&]+" $(System.DefaultWorkingDirectory)/logs/dep-results.txt)
        MEND_API2=$(echo "${MEND_URL}" | sed 's/saas/api-saas/g')
        LOGIN_RESPONSE=$(curl -X POST "${MEND_API2}/api/v2.0/login" -H "Content-Type: application/json" -H 'Accept: application/json' \
        -d '{"email": "'${MEND_EMAIL}'", "userKey": "'${MEND_USER_KEY}'" }')
        WS_APIKEY=$(echo "${LOGIN_RESPONSE}" | jq -r '.retVal.orgUuid')

        ### Run SBOM generator ###
        pip install mend-sbom-export-cli
        sbom_export_cli --user-key $MEND_USER_KEY --api-key $WS_APIKEY --url $MEND_URL --project $WS_PROJECTTOKEN --out $(System.DefaultWorkingDirectory)/logs

        ### Dependency Reports ###
        curl -o $(System.DefaultWorkingDirectory)/logs/riskreport.pdf -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectRiskReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o $(System.DefaultWorkingDirectory)/logs/inventoryreport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectInventoryReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o $(System.DefaultWorkingDirectory)/logs/duediligencereport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectDueDiligenceReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'

        ### Handle Scan Exit Codes ###
        mend_exits=$(env | grep exit)
        if [[ $mend_exits == *"=9" ]]; then 
          echo "A policy violation was found"
          echo $mend_exits
          awk '/Detected 1 Policy violations/,/Paths at risk/ {if (!/Paths at risk/) print}' $(System.DefaultWorkingDirectory)/logs/dep-results.txt
          exit 1
        else
          echo " Mend scans were success"
        fi
      env:
      ### Authentication Environment Variables ###
        MEND_EMAIL: $(MEND_EMAIL)
        MEND_USER_KEY: $(MEND_USER_KEY)
      ### SAST Thresholds
        MEND_SAST_THRESHOLD_HIGH: 1
      displayName: 'Mend Unified CLI Scan'

      ### Publish logs and sarif results ###
    - publish: $(System.DefaultWorkingDirectory)/logs
      artifact: mend-logs
      condition: succeededOrFailed()
    - publish: $(System.DefaultWorkingDirectory)/code-results.sarif
      artifact: CodeAnalysisLogs
      condition: succeededOrFailed()

- job: BuildOnRelease
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/v'))
  steps:
### Build the application with your required package manager.  The below example is for dotnet: ###
    - script: |
        SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
        echo "${SLN} is the solution that will be built"
        dotnet restore ${SLN}
      displayName: 'dotnet build'
### Build the image ###
    - script: |
        docker compose version
        docker compose build
        docker compose config --images > imagestoscan.txt
      env:
        TAG: $(Build.SourceBranchName)
      displayName: 'Docker Compose Build'
### The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "npm install --only=prod"
    - script: |
        echo Downloading Mend CLI
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
        mkdir $(System.DefaultWorkingDirectory)/sarif-results
    
        ### Run a Mend Software Composition Analysis Scan
        echo Run Mend dependencies scan
        mend dep -u -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) --no-color --fail-policy > dep-results.txt
        export dep_exit=$?
        cat dep-results.txt

        ### Run a Mend Static Application Security Analysis Scan
        echo Start Mend code scan
        mend code -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) -r --formats sarif --filename $(System.DefaultWorkingDirectory)/sarif-results/code-results --no-progress
        export code_exit=$?

        ### Run a Mend Image Scan ###
        echo "Run Mend image scan"
        echo "Showing images that will be scanned"
        cat imagestoscan.txt
        file="imagestoscan.txt"
        while IFS= read -r line
        do
          echo "Scanning the following image with name of $line"
          slashline=$(echo "$line" | sed 's/\//_/g')
          escline=$(echo "$slashline" | sed 's/:/_/')
          mend image $line --filename ~/.mend/logs/$escline.sarif --format sarif --fail-policy
          image_exit=$?
          echo "${escline}_exit=${image_exit}" >> image_exits.txt
          echo "${image_exit} is the current exit code for ${escline}"
        done < "$file"

        ### Log Clean Up ###
        mv ~/.mend/logs $(System.DefaultWorkingDirectory)
        mv $(System.DefaultWorkingDirectory)/dep-results.txt $(System.DefaultWorkingDirectory)/logs/dep-results.txt
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/logs/dep-results.txt"

        ### Collect Mend variables for API Usage ###
        export WS_PROJECTTOKEN=$(grep -oP "(?<=token=)[^&]+" $(System.DefaultWorkingDirectory)/logs/dep-results.txt)
        MEND_API2=$(echo "${MEND_URL}" | sed 's/saas/api-saas/g')
        LOGIN_RESPONSE=$(curl -X POST "${MEND_API2}/api/v2.0/login" -H "Content-Type: application/json" -H 'Accept: application/json' \
        -d '{"email": "'${MEND_EMAIL}'", "userKey": "'${MEND_USER_KEY}'" }')
        WS_APIKEY=$(echo "${LOGIN_RESPONSE}" | jq -r '.retVal.orgUuid')

        ### Run SBOM generator ###
        pip install mend-sbom-export-cli
        sbom_export_cli --user-key $MEND_USER_KEY --api-key $WS_APIKEY --url $MEND_URL --project $WS_PROJECTTOKEN --out $(System.DefaultWorkingDirectory)/logs

        ### Dependency Reports ###
        curl -o $(System.DefaultWorkingDirectory)/logs/riskreport.pdf -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectRiskReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o $(System.DefaultWorkingDirectory)/logs/inventoryreport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectInventoryReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        curl -o $(System.DefaultWorkingDirectory)/logs/duediligencereport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectDueDiligenceReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
  
        ### Handle Scan Exit Codes ###
        mend_exits=$(env | grep exit)
        image_exits=$(cat image_exits.txt)
        if [[ $mend_exits == *"=9" || $image_exits == *"=9" ]]; then 
          echo "A policy violation was found"
          echo $mend_exits
          echo $image_exits
          exit 1
        else
          echo " Mend scans were success"
        fi

      env:
        ### Authentication Environment Variables ###
        MEND_EMAIL: $(MEND_EMAIL)
        MEND_USER_KEY: $(MEND_USER_KEY)
        ### SAST Thresholds
        MEND_SAST_THRESHOLD_HIGH: 1
      displayName: 'Mend Unified CLI Scan'

    ### Publish logs and sarif results ###
    - publish: $(System.DefaultWorkingDirectory)/logs
      artifact: mend-logs
      condition: succeededOrFailed()
    - publish: $(System.DefaultWorkingDirectory)/sarif-results
      artifact: CodeAnalysisLogs
      condition: succeededOrFailed()

- job: BuildOnPullRequest
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  steps:
### Build the application with your required package manager.  The below example is for dotnet: ###
    - script: |
        SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
        echo "${SLN} is the solution that will be built"
        dotnet restore ${SLN}
      displayName: 'dotnet build'
### The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "npm install --only=prod"
    - script: |
        echo Downloading Mend CLI
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
    
        ### Run a Mend Software Composition Analysis Scan
        echo Run Mend dependencies scan
        mend dep -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) --no-color > dep-results.txt

        ### Run a Mend Static Application Security Analysis Scan
        echo Start Mend code scan
        mend code -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) -r --formats sarif --filename code-results --no-progress

        ### Log Clean Up ###
        mv ~/.mend/logs $(System.DefaultWorkingDirectory)
        mv $(System.DefaultWorkingDirectory)/dep-results.txt $(System.DefaultWorkingDirectory)/logs/dep-results.txt
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/logs/dep-results.txt"
      env:
      ### Authentication Environment Variables ###
        MEND_EMAIL: $(MEND_EMAIL)
        MEND_USER_KEY: $(MEND_USER_KEY)
      ### SAST Thresholds
        MEND_SAST_THRESHOLD_ONLY_NEW: true
      displayName: 'Mend Unified CLI Scan'

    ### Publish logs and sarif results ###
    - publish: $(System.DefaultWorkingDirectory)/logs
      artifact: mend-logs
      condition: succeededOrFailed()
    - publish: $(System.DefaultWorkingDirectory)/code-results.sarif
      artifact: CodeAnalysisLogs
      condition: succeededOrFailed()
