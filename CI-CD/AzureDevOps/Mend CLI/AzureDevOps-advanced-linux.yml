# ******** Mend Unified CLI Template for Azure DevOps ********
#
# You may wish to alter this file to override the build tool and Mend scanning technologies.
#
# For more configuration options, please check the technical documentation portal:
# ðŸ“š https://docs.mend.io/bundle/integrations/page/scan_with_the_mend_cli.html
#
# ******** Description ********
# mend dep will automatically use package managers and file system scanning to detect open source components.
# mend code will automatically detect languages and frameworks used in your projects to scan for code weaknesses.
# mend image will automatically scan an image for vulnerabilities with Operating System packages, Open Source vulnerabilities, and for secrets.

# Environment variables from Azure Key Vault must use letters, numbers, and hyphens only. Please reference this link for more information:
# https://learn.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates
# If you are NOT using a service user, and have multiple organizations, don't forget to set the organization in the scope parameter
# The following values should be added as environment variables with email and userKey being secrets
# MEND_URL: the mend url that you login to - (https://saas.mend.io) for example
# MENDEMAIL: the user email for the mend platform account that you wish to scan with. This should be stored as a secret and then translated to MEND_EMAIL at runtime.
# MENDUSERKEY: the user key found under my profile for the user you wish to scan with. This should be stored as a secret and then translated to MEND_USER_KEY at runtime.

name: 'mend-cli-scan'

# Define your own pipeline trigger here:
# Below is defined a trigger for scanning on a push to the main branch and scanning on a push to release branches.  This is considered an ideal time to scan so that an SBOM can be created for software releases and inventory is managed for released software.
trigger:
- main
- v*


pool:
  vmImage: ubuntu-latest
  
variables:
- name: MEND_URL
  value: https://saas.mend.io 
# value: https://saas-eu.mend.io

jobs:
- job: BuildOnMain
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  steps:
### Build the application with your required package manager.  The below example is for dotnet: ###
    - script: |
        SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
        echo "${SLN} is the solution that will be built"
        dotnet restore ${SLN}  --use-lockfile
      displayName: 'dotnet build'
### The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "npm install --only=prod"
    - script: |
        echo Downloading Mend CLI
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
    
        ### Run a Mend Software Composition Analysis Scan
        echo Run Mend dependencies scan
        mend dep -u -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) --fail-policy --non-interactive --export-results dep-results.txt
        export dep_exit=$?
        if [[ "$dep_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] Dependency scan policy violation"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        else
          echo "No policy violations found in dependencies scan"
        fi
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/dep-results.txt"

        ### Run a Mend Static Application Security Analysis Scan
        echo Start Mend code scan
        mend code -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) -r --formats sarif --filename code-results --non-interactive
        export code_exit=$?
        if [[ "$code_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] Code scan threshold violation"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        else
          echo "No policy violations found in code scan"
        fi

        ### Logs Folder Cleanup ###
        mv ~/.mend/logs $(System.DefaultWorkingDirectory)
        mv *results* $(System.DefaultWorkingDirectory)/logs/

        ### Collect Mend variables for API Usage ###
        export WS_PROJECTTOKEN=$(grep -oP "(?<=token=)[^&]+" $(System.DefaultWorkingDirectory)/logs/dep-results.txt)
        if [ -z "$WS_PROJECTTOKEN" ];
        then
          echo "##vso[task.logissue type=warning;] No project token found, reports will not be generated"
        else
          ### Run SBOM generator ###
          ### Requires admin priviledges ###
          pip install mend-sbom-export-cli
          sbom_export_cli --user-key $MEND_USER_KEY --service $MEND_EMAIL --url $MEND_URL --project $WS_PROJECTTOKEN --out $(System.DefaultWorkingDirectory)/logs

          ### Dependency Reports ###
          curl -o $(System.DefaultWorkingDirectory)/logs/riskreport.pdf -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
          -d '{"requestType":"getProjectRiskReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
          curl -o $(System.DefaultWorkingDirectory)/logs/inventoryreport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
          -d '{"requestType":"getProjectInventoryReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
          curl -o $(System.DefaultWorkingDirectory)/logs/duediligencereport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
          -d '{"requestType":"getProjectDueDiligenceReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        fi

      env:
      ### Authentication Environment Variables ###
        MEND_EMAIL: $(MENDEMAIL)
        MEND_USER_KEY: $(MENDUSERKEY)
      ### SAST Thresholds
        MEND_SAST_THRESHOLD_HIGH: 1
      displayName: 'Mend Unified CLI Scan'

    ### Publish logs and sarif results ###
    - publish: $(System.DefaultWorkingDirectory)/logs
      artifact: mend-logs-reports
      condition: succeededOrFailed()
    - publish: $(System.DefaultWorkingDirectory)/logs/code-results.sarif
      artifact: CodeAnalysisLogs
      condition: succeededOrFailed()

- job: BuildOnRelease
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/v'))
  steps:
### Build the application with your required package manager.  The below example is for dotnet: ###
    - script: |
        SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
        echo "${SLN} is the solution that will be built"
        dotnet restore ${SLN} --use-lockfile
      displayName: 'dotnet build'
### Build the image ###
    - script: |
        docker compose version
        docker compose build
        docker compose config --images > imagestoscan.txt
      env:
        TAG: $(Build.SourceBranchName)
      displayName: 'Docker Compose Build'
### The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "npm install --only=prod"
    - script: |
        echo Downloading Mend CLI
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
    
        ### Run a Mend Software Composition Analysis Scan
        echo Run Mend dependencies scan
        mend dep -u -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) --fail-policy --non-interactive --export-results dep-results.txt
        export dep_exit=$?
        if [[ "$dep_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] Dependency scan policy violation"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        else
          echo "No policy violations found in dependencies scan"
        fi
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/dep-results.txt"

        ### Run a Mend Static Application Security Analysis Scan
        echo Start Mend code scan
        mend code -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) -r --formats sarif --filename code-results --non-interactive
        export code_exit=$?
        if [[ "$code_exit" == "9" ]]; then
          echo "##vso[task.logissue type=warning;] Code scan threshold violation"
          echo "##vso[task.complete result=SucceededWithIssues;]"
        else
          echo "No policy violations found in code scan"
        fi

        ### Run a Mend Image Scan ###
        echo "Run Mend image scan"
        echo "Showing images that will be scanned"
        cat imagestoscan.txt
        file="imagestoscan.txt"
        while IFS= read -r line
        do
          slashline=$(echo "$line" | sed 's/\//-/g')
          escline=$(echo "$slashline" | sed 's/:/_/')
          echo "Scanning the image named $line with friendly name of $escline"
          mend image $line -s *//$(Build.Repository.Name)//* --filter critical --fail-policy > $escline-results.txt
          image_exit=$?
          if [[ "$image_exit" == "9" ]]; then
            echo "##vso[task.logissue type=warning;] Image scan policy violation in $escline"
            echo "##vso[task.complete result=SucceededWithIssues;]"
          else
            echo "No policy violations found in $line scan"
          fi
          cat $escline-results.txt
          echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/${escline}-results.txt"
        done < "$file"

        ### Logs Folder Cleanup ###
        mv ~/.mend/logs $(System.DefaultWorkingDirectory)
        mv *results* $(System.DefaultWorkingDirectory)/logs/

        ### Collect Mend variables for API Usage ###
        export WS_PROJECTTOKEN=$(grep -oP "(?<=token=)[^&]+" $(System.DefaultWorkingDirectory)/logs/dep-results.txt)
        if [ -z "$WS_PROJECTTOKEN" ];
        then
          echo "##vso[task.logissue type=warning;] No project token found, reports will not be generated"
        else
          ### Run SBOM generator ###
          ### Requires admin priviledges ###
          pip install mend-sbom-export-cli
          sbom_export_cli --user-key $MEND_USER_KEY --service $MEND_EMAIL --url $MEND_URL --project $WS_PROJECTTOKEN --out $(System.DefaultWorkingDirectory)/logs

          ### Dependency Reports ###
          curl -o $(System.DefaultWorkingDirectory)/logs/riskreport.pdf -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
          -d '{"requestType":"getProjectRiskReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
          curl -o $(System.DefaultWorkingDirectory)/logs/inventoryreport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
          -d '{"requestType":"getProjectInventoryReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
          curl -o $(System.DefaultWorkingDirectory)/logs/duediligencereport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
          -d '{"requestType":"getProjectDueDiligenceReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
        fi

      env:
        ### Authentication Environment Variables ###
        MEND_EMAIL: $(MENDEMAIL)
        MEND_USER_KEY: $(MENDUSERKEY)
        ### SAST Thresholds
        MEND_SAST_THRESHOLD_HIGH: 1
      displayName: 'Mend Unified CLI Scan'

    ### Publish logs and sarif results ###
    - publish: $(System.DefaultWorkingDirectory)/logs
      artifact: mend-logs-reports
      condition: succeededOrFailed()
    - publish: $(System.DefaultWorkingDirectory)/logs/code-results.sarif
      artifact: CodeAnalysisLogs
      condition: succeededOrFailed()

- job: BuildOnPullRequest
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  steps:
### Build the application with your required package manager.  The below example is for dotnet: ###
    - script: |
        SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
        echo "${SLN} is the solution that will be built"
        dotnet restore ${SLN} --use-lockfile
      displayName: 'dotnet build'
### The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "npm install --only=prod"
    - script: |
        echo Downloading Mend CLI
        curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend

        ### Run a Mend Software Composition Analysis Scan
        echo Run Mend dependencies scan
        mend dep -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) --non-interactive --export-results dep-results.txt
        echo "##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/dep-results.txt"

        ### Run a Mend Static Application Security Analysis Scan
        echo Start Mend code scan
        mend code -s *//$(System.TeamProject)//$(Build.Repository.Name)_$(Build.SourceBranchName) -r --formats sarif --filename code-results --non-interactive

        ### Logs Folder Cleanup ###
        mv ~/.mend/logs $(System.DefaultWorkingDirectory)
        mv *results* $(System.DefaultWorkingDirectory)/logs/
      env:
      ### Authentication Environment Variables ###
        MEND_EMAIL: $(MENDEMAIL)
        MEND_USER_KEY: $(MENDUSERKEY)
      ### SAST Thresholds
        MEND_SAST_THRESHOLD_ONLY_NEW: true
        # Set diff thresholds from the base scan
        # MEND_SAST_THRESHOLD_HIGH: 1
        # MEND_SAST_THRESHOLD_MEDIUM: 1
        # MEND_SAST_THRESHOLD_LOW: 1
        
      displayName: 'Mend Unified CLI Scan'

    ### Publish logs and sarif results ###
    - publish: $(System.DefaultWorkingDirectory)/logs
      artifact: mend-logs
      condition: succeededOrFailed()
    - publish: $(System.DefaultWorkingDirectory)/logs/code-results.sarif
      artifact: CodeAnalysisLogs
      condition: succeededOrFailed()
