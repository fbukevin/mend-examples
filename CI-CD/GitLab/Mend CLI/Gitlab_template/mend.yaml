variables:
  MEND_EMAIL: ${MEND_EMAIL}
  MEND_USER_KEY: ${MEND_USER_KEY}
  MEND_URL: ${MEND_URL}
  PROJECT: ${CI_PROJECT_NAME}_${CI_COMMIT_BRANCH}
  MEND_SCA:
    description: "'true' to trigger SCA"
    value: "true"
  MEND_SAST:
    description: "'true' to trigger mend_sast"
    value: "true"
  MEND_REPORTS:
    description: "Comma-separated list containing any of: SBOM,RISK,INVENTORY,DUE_DILIGENCE,ALL"
    value: "ALL"


stages:
  - download
  - mend_scan
  - mend_reports

download_mend:
  stage: download
  script: |
    echo Downloading Mend CLI
    curl https://downloads.mend.io/cli/linux_amd64/mend -o ./mend && chmod +x ./mend
  artifacts:
    paths:
      - ./mend

mend_sca:
  stage: mend_scan
  allow_failure: true
  needs: [download_mend]
  script: |
    ./mend dep -u --fail-policy --export-results dep-results.txt -s "$CI_PROJECT_NAMESPACE//$PROJECT"
  after_script: |
    if [[ $CI_JOB_STATUS == 'failed' ]]; then
      echo "Dependency scan policy violation"
    else
      echo "No policy violations found in dependencies scan"
    fi
    cp -R $HOME/.mend/logs $CI_PROJECT_DIR/mend_logs
  artifacts:
    when: always
    untracked: true
    paths:
      - dep-results.txt
      - $CI_PROJECT_DIR/mend_logs/
    expire_in: 2 weeks
  rules:
    - if: '$MEND_SCA == "true"'


mend_sast:
  stage: mend_scan
  needs: [download_mend]
  script: |
    ./mend code -r --formats sarif --filename code-results --non-interactive
  after_script: |
    if [[ $CI_JOB_STATUS == 'failed' ]]; then
      echo "Code scan threshold violation"
    else
      echo "No policy violations found in code scan"
    fi
    cp -R ~/.mend/logs $CI_PROJECT_DIR/mend_logs
  artifacts:
    when: always
    untracked: true
    paths:
      - code-results.sarif
      - mend_logs
    expire_in: 2 weeks
  rules:
    - if: '$MEND_SAST == "true"'

mend_reports:
  image: python:3.10.14-slim-bullseye
  stage: mend_reports
  needs: [mend_sca]
  before_script:
    - apt update && apt install curl -y
  script: |
    ### Generate Mend reports ###
    ### Obtain project token ###
    export WS_PROJECTTOKEN=$(grep -oP "(?<=token=)[^&]+" dep-results.txt)
    echo "FOUND TOKEN: $WS_PROJECTTOKEN"
    if [ -z "$WS_PROJECTTOKEN" ];
    then
      echo "No project token found, reports will not be generated"
      exit 1
    else
      export REPORT_TYPES="$MEND_REPORTS"
      mkdir mend_reports

      ### Run SBOM generator ###
      ### Requires admin priviledges ###
      if [[ "$REPORT_TYPES" == *"SBOM"* || "$REPORT_TYPES" == *"ALL"* ]];
      then
        echo "Generating SBOM report"
        pip install mend-sbom-export-cli
        sbom_export_cli --user-key $MEND_USER_KEY --service $MEND_EMAIL --url $MEND_URL --project $WS_PROJECTTOKEN --out mend_reports/
      fi

      ### Dependency Reports (SCA) ###
      ### Risk Report
      if [[ "$REPORT_TYPES" == *"RISK"* || "$REPORT_TYPES" == *"ALL"* ]];
      then
        echo "Generating Risk report"
        curl -o mend_reports/riskreport.pdf -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectRiskReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
      fi

      ### Inventory Report
      if [[ "$REPORT_TYPES" == *"INVENTORY"* || "$REPORT_TYPES" == *"ALL"* ]];
      then
        echo "Generating Inventory report"
        curl -o mend_reports/inventoryreport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectInventoryReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
      fi

      ### Due Diligence Report
      if [[ "$REPORT_TYPES" == *"DUE_DILIGENCE"* || "$REPORT_TYPES" == *"ALL"* ]];
      then
        echo "Generating Due Diligence report"
        curl -o mend_reports/duediligencereport.xlsx -X POST "${MEND_URL}/api/v1.4" -H "Content-Type: application/json" \
        -d '{"requestType":"getProjectDueDiligenceReport","userKey":"'${MEND_USER_KEY}'","projectToken":"'${WS_PROJECTTOKEN}'"}'
      fi
    fi
  artifacts:
    paths:
      - mend_reports/
    when: always
  rules:
    - if: '$MEND_SCA == "true"'

