# ******** Mend Unified CLI Template for Gitlab CI ********
#
# You may wish to alter this file to override the build tool and Mend scanning technologies.
#
# For more configuration options, please check the technical documentation portal:
# ðŸ“š https://docs.mend.io/bundle/integrations/page/scan_with_the_mend_cli.html
#
# ******** Description ********
# mend dep will automatically use package managers and file system scanning to detect open source components.
# mend code will automatically detect languages and frameworks used in your projects to scan for code weaknesses.

# If you are NOT using a service user, and have multiple organizations, don't forget to scall the scope -s parameter to set the organization
# The following values should be added as environment variables with email and userKey being secrets
#    MEND_URL: the mend url that you login to - (https://saas.mend.io) for example
#    MEND_EMAIL: the user email for the mend platform account you wish to scan with
#    MEND_USER_KEY: the user key found under my profile for the user you wish to scan with

## Change default image to a relevant image for your build ##
default:
  image: maven:3.8-openjdk-11

stages:
#  - build
  - scan

## uncomment the appropriate script, if lockfiles are checked in this step is unnecessary
#lockfile_build:
#  stage: build
## npm
#  script: "npm install --ignore-scripts"
#  artifacts:
#    paths:
#      - "**package-lock.json"
## yarn
#  script: "yarn install --ignore-scripts"
#  artifacts:
#    paths:
#      - "**yarn.lock"
## composer
#  script: "composer install"
#  artifacts:
#    paths:
#      - "**composer.lock"
## bundler
#  script: "bundle install"
#  artifacts:
#    paths:
#      - "**Gemfile.lock"


# The mend dep scan should be called AFTER a package manager build step such as "mvn clean install -DskipTests=true" or "dotnet restore"
# Due to the way gitlab segments jobs and artifacts are not re-usable due to timestamps, we must re-build the project in the same job"
## https://gitlab.com/gitlab-org/gitlab/-/issues/234078 ##

mend_scan:
  stage: scan
  variables:
    ### Authentication Variables ###
    MEND_EMAIL: $MEND_EMAIL
    MEND_USER_KEY: $MEND_USER_KEY
    MEND_URL: "https://saas.mend.io"
#   MEND_URL: "https://saas-eu.mend.io"

  script: |
    if find . -name "pom.xml" -print -quit | grep -q "pom.xml"; then
      echo "found a pom.xml file, building using maven"
      mvn clean install -DskipTests
    else
      echo "there is no pom.xml "
    fi
    if find . -name "gradlew" -print -quit | grep -q "gradlew"; then
      echo "found a gradlew file, building using gradle wrapper"
      chmod +x gradlew && ./gradlew build -x test
    else
      echo "there is no gradlew file "
    fi
    if find . -name "requirements.txt" -print -quit | grep -q "requirements.txt"; then
      echo "found a requirements.txt file, building using pip"
      pip install -r requirements.txt
    else
      echo "there is no requirements.txt file"
    fi
    if find . -name ".sln" -print -quit | grep -q ".sln"; then
      echo "found a .sln file, building using dotnet"
      SLN=$(find ./ -type f -wholename "*.sln" | head -n 1)
      echo "${SLN} is the solution that will be built"
      dotnet restore ${SLN}
    else
      echo "there is no .sln file"
    fi
    if find . -name "go.mod" -print -quit | grep -q "go.mod"; then
      echo "found a go.mod file, building using go"
      go build -v ./...
    else
      echo "there is no go.mod file"
    fi
    echo Downloading Mend CLI
    curl https://downloads.mend.io/cli/linux_amd64/mend -o /usr/local/bin/mend && chmod +x /usr/local/bin/mend
    echo Run Mend dependencies scan
    mend dep -u
    echo Run Mend code scan
    mend code
    cp -r ~/.mend/logs $CI_PROJECT_DIR/mend-logs
  artifacts:
    paths:
      - mend-logs/
    when: always